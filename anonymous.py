#Coded By K361

import base64
exec(base64.b64decode('dHJ5IDoKICBpbXBvcnQgc3lzLCB0aW1lLCBvcywgcmVxdWVzdHMsIHNtdHBsaWIKICBmcm9tIHJlcXVlc3RzIGltcG9ydCAqCmV4Y2VwdCBJbXBvcnRFcnJvciBhcyBlcnJvciA6IAogIHN5cy5leGl0KGYiXDAzM1sxOzkxbVdBUk5JTkcgOiB7ZXJyb3J9LCBwbGVhc2UgaW5zdGFsbCBpdC4iKQp0cnkgOgogICAgcmVxdWVzdCA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbSIsIHRpbWVvdXQ9MykKZXhjZXB0IChyZXF1ZXN0cy5Db25uZWN0aW9uRXJyb3IsIHJlcXVlc3RzLlRpbWVvdXQpIGFzIGV4Y2VwdGlvbjoKICAgIHN5cy5leGl0KCJcMDMzWzE7OTRtW1wwMzNbOTFtICFcMDMzWzk0bSBdXDAzM1s5MW0gTm8gSW50ZXJuZXQgQ29ubmVjdGlvbi4iKQp0aW1lLnNsZWVwKDIpCm9zLnN5c3RlbSgiY2xlYXIiKQp0cnkgOgogd2hpbGUgVHJ1ZSA6CiAgICAgcGFzc3dvcmQ9aW5wdXQoIlwwMzNbMTs5NG1FbnRlciBUb29sJ3MgUGFzc3dvcmQgOiBcMDMzWzkxbSIpCiAgICAgaWYgcGFzc3dvcmQgPT0gIkszNjEiIG9yIHBhc3N3b3JkID09ICJrMzYxIiA6CiAgICAgICBwcmludCgiXDAzM1sxOzk0bUFjY2VzcyBHcmFudGVkICEiKQogICAgICAgYnJlYWsKICAgICBlbHNlOgogICAgICAgcHJpbnQoIlwwMzNbMTs5MW1JbmNvcnJlY3QgUGFzc3dvcmQiKQogICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL3QubWUvTGludXhIYWNraW5nVG9vbHMiKQogICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCmV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICBwcmludCgpCiAgcHJpbnQoIlwwMzNbOTRtW1wwMzNbOTFtICFcMDMzWzk0bSBdXDAzM1s5MW0gQ3RybCArIEMgRGV0ZWN0ZWQuLi4iKQogIHRpbWUuc2xlZXAoMikKICBzeXMuZXhpdCgpCnRpbWUuc2xlZXAoMikKb3Muc3lzdGVtKCJjbGVhciIpCmJhbm5lcj0nJycKXDAzM1s5NG0gICAgX19fClwwMzNbOTRtICAgLyBfIHwgX19fICBfX18gIF9fXyAgX18gX19fXyBfICBfX18gIF9fIF9fX19fClwwMzNbOTRtICAvIF9fIHwvIF8gXC8gXyBcLyBfIFwvIC8vIC8gICcgXC8gXyBcLyAvLyAoXy08ClwwMzNbOTFtIC9fLyB8Xy9fLy9fL1xfX18vXy8vXy9cXywgL18vXy9fL1xfX18vXF8sXy9fX18vCiAgICAgICAgICAgICAgICAgICAgICAvX19fLwoKXDAzM1s5NG0gICAgICAgICAgICAgICBbIFwwMzNbOTFtQW5vbnltb3VzIHYyLjAgXDAzM1s5NG1dClwwMzNbOTRtICAgICAgICAgIFsgXDAzM1s5MW1UaGlzIFRvb2wgQ3JlYXRlZCBCeSBLMzYxIFwwMzNbOTRtXQoKCgonJycKb3B0aW9uPScnJwpcMDMzWzk0bSAgICAgICAgICAgICAgICBbIFwwMzNbOTFtQ2hvb3NlIEEgTnVtYmVyIFwwMzNbOTRtXQoKXDAzM1s5NG0gICAgICBbXDAzM1s5MW0gMVwwMzNbOTRtIF0tLS0tLS0tW1wwMzNbOTFtIEFub255bW91cyBNYWlsXDAzM1s5NG0gXQpcMDMzWzk0bSAgICAgICAgfApcMDMzWzk0bSAgICAgIFtcMDMzWzkxbSAyXDAzM1s5NG0gXS0tLS0tLS1bXDAzM1s5MW0gQW5vbnltb3VzIFNNU1wwMzNbOTRtIF0KXDAzM1s5NG0gICAgICAgIHwKXDAzM1s5NG0gICAgICBbXDAzM1s5MW0gM1wwMzNbOTRtIF0tLS0tLS0tW1wwMzNbOTFtIEFib3V0IFRvb2xcMDMzWzk0bSBdClwwMzNbOTRtICAgICAgICB8ClwwMzNbOTRtICAgICAgW1wwMzNbOTFtIDRcMDMzWzk0bSBdLS0tLS0tLVtcMDMzWzkxbSBPdXIgVGVsZWdyYW0gQ2hhbm5lbFwwMzNbOTRtIF0KXDAzM1s5NG0gICAgICAgIHwKXDAzM1s5NG0gICAgICBbXDAzM1s5MW0gNVwwMzNbOTRtIF0tLS0tLS0tW1wwMzNbOTFtIEV4aXQgVGhlIFRvb2xcMDMzWzk0bSBdCgonJycKZGVmIG1haW4oKToKIHRyeSA6CiAgIHByaW50KGJhbm5lcikKICAgcHJpbnQob3B0aW9uKQogICBjdHJsPWlucHV0KCJcMDMzWzk0bVtcMDMzWzkxbSBBbm9ueW1vdXNcMDMzWzk0bSBdID4+IFwwMzNbOTFtIikKICAgaWYgY3RybD09IjEiOgogICAgIG1haWwoKQogICBlbGlmIGN0cmw9PSIyIjoKICAgICBzbXMoKQogICBlbGlmIGN0cmw9PSIzIjoKICAgICBhYm91dF90b29sKCkKICAgZWxpZiBjdHJsPT0iNCI6CiAgICAgb3VyX3RlbGVncmFtX2NoYW5uZWwoKQogICBlbGlmIGN0cmw9PSI1IjoKICAgICBleGl0KCkKICAgZWxzZToKICAgICBwcmludCgiXDAzM1s5NG1bXDAzM1s5MW0gIVwwMzNbOTRtIF1cMDMzWzkxbSBJbnZhbGlkIE51bWJlciIpCiAgICAgdGltZS5zbGVlcCgyKQogICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgIHJldHVybiBtYWluKCkKIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgcHJpbnQoKQogICBwcmludCgiXDAzM1s5NG1bXDAzM1s5MW0gIVwwMzNbOTRtIF1cMDMzWzkxbSBDdHJsICsgQyBEZXRlY3RlZC4uLiIpCiAgIHRpbWUuc2xlZXAoMikKICAgc3lzLmV4aXQoKQpkZWYgbWFpbCgpOgogdHJ5IDoKICAgZnJvbV9hZGRyPSJkYXJrc3Rhci5jcmFja0BnbWFpbC5jb20iCiAgIHBhc3N3b3JkPSJ3cWNhd2hraHJyb3dobGxkIgogICBmcm9tX25hbWU9aW5wdXQoIlwwMzNbOTRtW1wwMzNbOTFtIEFub255bW91c1wwMzNbOTRtIC9cMDMzWzkxbSBTZXQgRnJvbSBOYW1lXDAzM1s5NG0gXSA+PiBcMDMzWzkxbSIpCiAgIHRvX2VtYWlsPWlucHV0KCJcMDMzWzk0bVtcMDMzWzkxbSBBbm9ueW1vdXNcMDMzWzk0bSAvXDAzM1s5MW0gU2V0IFJlY2lwaWVudCBFbWFpbFwwMzNbOTRtIF0gPj4gXDAzM1s5MW0iKQogICBzdWJqZWN0PWlucHV0KCJcMDMzWzk0bVtcMDMzWzkxbSBBbm9ueW1vdXNcMDMzWzk0bSAvXDAzM1s5MW0gU2V0IE1haWwgU3ViamVjdFwwMzNbOTRtIF0gPj4gXDAzM1s5MW0iKQogICBtZXNzYWdlPWlucHV0KCJcMDMzWzk0bVtcMDMzWzkxbSBBbm9ueW1vdXNcMDMzWzk0bSAvXDAzM1s5MW0gU2V0IE1haWwgQ29udGVudHNcMDMzWzk0bSBdID4+IFwwMzNbOTFtIikKICAgbXNnPWYnJydGcm9tOntmcm9tX25hbWV9ClN1YmplY3Q6e3N1YmplY3R9Cgp7bWVzc2FnZX0nJycKICAgc2VydmVyPXNtdHBsaWIuU01UUCgic210cC5nbWFpbC5jb20iLCI1ODciKQogICBwcmludCgpCiAgIHNlcnZlci5zdGFydHRscygpCiAgIHNlcnZlci5sb2dpbihmcm9tX2FkZHIscGFzc3dvcmQpCiAgIHByaW50KGYiXDAzM1s5NG1bXDAzM1s5MW0gKlwwMzNbOTRtIF1cMDMzWzkxbSBTZW5kaW5nIE1haWwgVG8uLi4uIHt0b19lbWFpbH0iKQogICBzZXJ2ZXIuc2VuZG1haWwoZnJvbV9hZGRyLHRvX2VtYWlsLG1zZykKICAgc2VydmVyLnF1aXQoKQogICBwcmludCgiXDAzM1s5NG1bIOKclFwwMzNbOTRtIF1cMDMzWzkxbSBTdWNjZWZ1bGwgTWFpbCBTZW50ICEiKQogICB0aW1lLnNsZWVwKDMpCiAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICByZXR1cm4gbWFpbigpCiBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgIHByaW50KCkKICAgcHJpbnQoIlwwMzNbOTRtW1wwMzNbOTFtICFcMDMzWzk0bSBdXDAzM1s5MW0gQ3RybCArIEMgRGV0ZWN0ZWQuLi4iKQogICB0aW1lLnNsZWVwKDIpCiAgIHN5cy5leGl0KCkKZGVmIHNtcygpOgogdHJ5IDoKICAgIGlwPWdldCgiaHR0cHM6Ly9hcGkuaXBpZnkub3JnIikKICAgIGNjPWlucHV0KCJcMDMzWzk0bVtcMDMzWzkxbSBBbm9ueW1vdXNcMDMzWzk0bSAvXDAzM1s5MW0gU2V0IENvdW50cnkgQ29kZVwwMzNbOTRtIF0gPj4gXDAzM1s5MW0iKQogICAgcmVjaXBpZW50PWlucHV0KCJcMDMzWzk0bVtcMDMzWzkxbSBBbm9ueW1vdXNcMDMzWzk0bSAvXDAzM1s5MW0gU2V0IFJlY2lwaWVudCBOdW1iZXJcMDMzWzk0bSBdID4+IFwwMzNbOTFtIikKICAgIG1lc3NhZ2U9aW5wdXQoIlwwMzNbOTRtW1wwMzNbOTFtIEFub255bW91c1wwMzNbOTRtIC9cMDMzWzkxbSBTZXQgTWVzc2FnZVwwMzNbOTRtIF0gPj4gXDAzM1s5MW0iKQogICAgbmI9KGYie2NjfXtyZWNpcGllbnR9IikKICAgIGFwaT0idGV4dGJlbHQiCiAgICBtc2c9ZicnJ3ttZXNzYWdlfScnJwogICAgcHJpbnQoKQogICAgcHJpbnQoZiJcMDMzWzk0bVtcMDMzWzkxbSAqXDAzM1s5NG0gXVwwMzNbOTFtIFNlbmRpbmcgTWVzc3NhZ2UgVG8uLi4uIHtuYn0iKQogICAgcmVzcD1yZXF1ZXN0cy5wb3N0KCJodHRwczovL3RleHRiZWx0LmNvbS90ZXh0Iix7InBob25lIjpuYiwibWVzc2FnZSI6bXNnLCJrZXkiOmFwaX0pCiAgICBpZiAidHJ1ZSIgaW4gcmVzcC50ZXh0OgogICAgICBwcmludCgiXDAzM1s5NG1bIOKclFwwMzNbOTRtIF1cMDMzWzkxbSBTdWNjZWZ1bGwgbWVzc2FnZSBzZW50ICEiKQogICAgZWxpZiAiYWxsb3dlZCBwZXIgZGF5IiBpbiByZXNwLnRleHQ6CiAgICAgIHByaW50KCJcMDMzWzk0bVtcMDMzWzkxbSAhXDAzM1s5NG0gXVwwMzNbOTFtIEZhaWxlZCA6IE9ubHkgb25lIHRleHQgbWVzc2FnZSBpcyBhbGxvd2VkIHBlciBkYXkuIikKICAgIGVsaWYgIlVSTHMiIGluIHJlc3AudGV4dDoKICAgICAgcHJpbnQoIlwwMzNbOTRtW1wwMzNbOTFtICFcMDMzWzk0bSBdXDAzM1s5MW0gRmFpbGVkIDogVXJsIGFyZSBkaXNhYmxlZCBmb3IgZnJlZSBTTVMuIikKICAgIGVsaWYgImRvZXMgbm90IGZpdCIgaW4gcmVzcC50ZXh0OgogICAgICBwcmludCgiXDAzM1s5NG1bXDAzM1s5MW0gIVwwMzNbOTRtIF1cMDMzWzkxbSBGYWlsZWQgbWVzc2FnZSB0b28gbG9uZy4iKQogICAgZWxpZiAiMTY0IGZvcm1hdCIgaW4gcmVzcC50ZXh0OgogICAgICBwcmludCgiXDAzM1s5NG1bXDAzM1s5MW0gIVwwMzNbOTRtIF1cMDMzWzkxbSBZb3VyIHBob25lIG51bWJlciBpcyBub3QgZGlzcG9uaWJsZSBmb3IgdGhpcyBzZXJ2aWNlLiIpCiAgICBlbHNlOgogICAgICBwcmludCgiXDAzM1s5NG1bXDAzM1s5MW0gIVwwMzNbOTRtIF1cMDMzWzkxbSBGYWlsZWQgdG8gc2VuZCBtZXNzYWdlLiIpCiAgICB0aW1lLnNsZWVwKDUpCiAgICBzYXZlPW9wZW4oInNlc3MudHh0IiwiYSIpCiAgICBzYXZlLndyaXRlKGYiXG5pcD17aXB9OnBob25lIG5vLj17bmJ9IikKICAgIG9zLnN5c3RlbSgicm0gc2Vzcy50eHQiKQogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICByZXR1cm4gbWFpbigpCiBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICBwcmludCgpCiAgICBwcmludCgiXDAzM1s5NG1bXDAzM1s5MW0gIVwwMzNbOTRtIF1cMDMzWzkxbSBDdHJsICsgQyBEZXRlY3RlZC4uLiIpCiAgICB0aW1lLnNsZWVwKDIpCiAgICBzeXMuZXhpdCgpCmRlZiBhYm91dF90b29sKCk6CiAgIG9zLnN5c3RlbSgieGRnLW9wZW4gaHR0cHM6Ly9naXRodWIuY29tL0QtSzM2MS9Bbm9ueW1vdXMiKQogICBvcy5zeXN0ZW0oImNsZWFyIikKICAgcmV0dXJuIG1haW4oKQpkZWYgb3VyX3RlbGVncmFtX2NoYW5uZWwoKToKICAgb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL3QubWUvTGludXhIYWNraW5nVG9vbHMiKQogICBvcy5zeXN0ZW0oImNsZWFyIikKICAgcmV0dXJuIG1haW4oKQpkZWYgZXhpdCgpOgogICBwcmludCgpCiAgIHByaW50KCJcMDMzWzk0bVtcMDMzWzkxbSAqXDAzM1s5NG0gXVwwMzNbOTFtIFRoYW5rcyBGb3IgVXNpbmcgTXkgU2NyaXB0LiIpCiAgIHByaW50KCkKICAgdGltZS5zbGVlcCgyKQogICBvcy5zeXN0ZW0oImV4aXQiKQoKCm1haW4oKQoK'))
